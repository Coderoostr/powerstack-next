{
  "version": 3,
  "sources": ["<stdin>", "../node_modules/@remix-run/dev/compiler/shims/react.ts", "../app/entry.server.tsx", "../app/styles/stitches.config.ts", "/Users/gaboesquivel/Code/powerstack-remix/app/root.tsx", "../app/app-config.ts", "../app/auth.server.ts", "../app/store/index.ts", "../app/library/utils.ts", "../app/store/global-defaults.ts", "../app/store/global-slice.ts", "../app/styles/client.context.ts", "/Users/gaboesquivel/Code/powerstack-remix/app/routes/actions/login/$strategy.tsx", "/Users/gaboesquivel/Code/powerstack-remix/app/routes/index.tsx", "../app/components/wallet.tsx", "/Users/gaboesquivel/Code/powerstack-remix/app/routes/jokes.tsx", "/Users/gaboesquivel/Code/powerstack-remix/app/routes/jokes/jokes-error.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as React from \"react\";\nexport { React };\n", "import type { EntryContext } from '@remix-run/node'\nimport { RemixServer } from '@remix-run/react'\nimport { renderToString } from 'react-dom/server'\n\nimport { getCssText } from './styles/stitches.config'\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n) {\n  let markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />,\n  )\n\n  markup = markup.replace(\n    /<style id=\"stitches\">.*<\\/style>/g,\n    `<style id=\"stitches\">${getCssText()}</style>`,\n  )\n\n  responseHeaders.set('Content-Type', 'text/html')\n\n  return new Response('<!DOCTYPE html>' + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  })\n}\n", "import { createStitches } from '@stitches/react'\n\nconst stitches = createStitches({\n  theme: {\n    colors: {\n      red: '#ff6d6d',\n      steel: '#363645',\n      black: '#000',\n      white: '#fff',\n      grey: '#666',\n    },\n  },\n  media: {\n    tabletUp: '(min-width: 768px)',\n    desktopUp: '(min-width: 1024px)',\n    largeDesktopUp: '(min-width: 1680px)',\n  },\n})\n\nconst { styled, globalCss, getCssText } = stitches\n\nexport { styled, getCssText, globalCss }\n", "import type { LoaderFunction, MetaFunction } from '@remix-run/node'\nimport { json } from '@remix-run/node'\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  useCatch,\n  useLoaderData,\n} from '@remix-run/react'\nimport { useContext, useEffect } from 'react'\nimport { appconfig } from './app-config'\nimport { auth, session_storage } from './auth.server'\nimport { useStore } from './store'\n\nimport ClientStyleContext from './styles/client.context'\nimport { styled } from './styles/stitches.config'\n\nconst Container = styled('div', {\n  backgroundColor: '#ff0000',\n  padding: '1em',\n})\n\nexport const meta: MetaFunction = () => ({\n  charset: 'utf-8',\n  title: 'Remix with Stitches',\n  viewport: 'width=device-width,initial-scale=1',\n})\n\ninterface DocumentProps {\n  children: React.ReactNode\n  title?: string\n}\n\nconst Document = ({ children, title }: DocumentProps) => {\n  const clientStyleData = useContext(ClientStyleContext)\n\n  // Only executed on client\n  useEffect(() => {\n    // reset cache to re-apply global styles\n    clientStyleData.reset()\n  }, [clientStyleData])\n\n  return (\n    <html lang=\"en\">\n      <head>\n        {title ? <title>{title}</title> : null}\n        <Meta />\n        <Links />\n        <style\n          id=\"stitches\"\n          dangerouslySetInnerHTML={{ __html: clientStyleData.sheet }}\n          suppressHydrationWarning\n        />\n      </head>\n      <body>\n        {children}\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  )\n}\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const user = await auth.isAuthenticated(request)\n  const session = await session_storage.getSession(\n    request.headers.get('cookie'),\n  )\n  const error = session.get(auth.sessionErrorKey)\n  console.log('SESSION', { user, session_data: JSON.stringify(session), error })\n  useStore.getState().setSessionData({ user, appconfig })\n\n  return json({\n    user,\n    appconfig,\n  })\n}\n\nexport default function App() {\n  useStore.getState().setSessionData(useLoaderData())\n  return (\n    <Document>\n      <Outlet />\n    </Document>\n  )\n}\n\nexport function CatchBoundary() {\n  const caught = useCatch()\n\n  return (\n    <Document title={`${caught.status} ${caught.statusText}`}>\n      <Container>\n        <p>\n          [CatchBoundary]: {caught.status} {caught.statusText}\n        </p>\n      </Container>\n    </Document>\n  )\n}\n\nexport function ErrorBoundary({ error }: { error: Error }) {\n  return (\n    <Document title=\"Error!\">\n      <Container>\n        <p>[ErrorBoundary]: There was an error: {error.message}</p>\n      </Container>\n    </Document>\n  )\n}\n", "import * as env from 'env-var'\n\n// PUBLIC CONFIGURATION\n// Be careful to not put secrets here\n\n// placeholder for feature flags\ntype FeatureFlags = {}\n\n// smart contract addresses\ntype Contracts = {}\n\n// apis and other services\ntype Services = {}\n\ntype Analytics = {\n  google: string\n  sentry: string\n}\n\n// ethereum network config\ntype Network = {\n  chain: string\n  chain_id: string\n}\n\ntype Cloudinary = {\n  cloudName: string\n  apiKey: string\n  apiSecret: string\n}\n\n// global application configuration based on env\nexport type AppConfig = {\n  network: Network\n  contracts: Contracts\n  services: Services\n  features: FeatureFlags\n  analytics: Analytics\n  cloudinary?: Cloudinary\n}\n\nexport const appconfig: AppConfig = {\n  network: {\n    chain: env.get('CHAIN').required().asString(),\n    chain_id: env.get('CHAIN_ID').required().asString(),\n  },\n  contracts: {},\n  services: {\n    graphql_api: env.get('GRAPHQL_API').required().asString(),\n  },\n  analytics: {\n    google: env.get('GOOGLE_ANALYTICS').asString() || '',\n    sentry: env.get('SENTRY_DSN').asString() || '',\n  },\n  cloudinary: {\n    cloudName: env.get('CLOUDINARY_CLOUD_NAME').required().asString(),\n    apiKey: env.get('CLOUDINARY_API_KEY').required().asString(),\n    apiSecret: env.get('CLOUDINARY_API_SECRET').required().asString(),\n  },\n  features: {},\n}\n", "import { createCookieSessionStorage } from '@remix-run/node'\nimport { ethers } from 'ethers'\nimport { Authenticator, AuthorizationError } from 'remix-auth'\nimport { FormStrategy } from 'remix-auth-form'\nimport { Address } from './types'\n\nexport const session_storage = createCookieSessionStorage({\n  cookie: {\n    name: '__session',\n    httpOnly: true,\n    path: '/',\n    sameSite: 'lax',\n    secrets: ['s3cret'], // This should be an env variable\n    secure: process.env.NODE_ENV === 'production',\n  },\n})\n\nexport type RareMintUser = {\n  address: Address\n} | null\n\nexport const auth = new Authenticator<RareMintUser>(session_storage)\n\nexport type WalletType = 'metamask' | 'wallet_connect'\n\nauth.use(\n  new FormStrategy(async ({ form }) => {\n    const address = form.get('address')\n    const signature = form.get('signature')\n    const message = form.get('message')\n\n    // all these values are required\n    console.log('metamask strategy', { address, signature, message })\n    if (!address || !signature || !message)\n      throw new AuthorizationError(`Invalid metamask login request`)\n\n    const signerAddr = await ethers.utils.verifyMessage(message.toString(), signature.toString())\n    if (signerAddr !== address) throw new AuthorizationError(`Invalid signature`)\n\n    const user: RareMintUser = {\n      address: address.toString(),\n    }\n\n    return user\n  }),\n  // each strategy has a name and can be changed to use another one\n  'metamask',\n)\n", "import createVanillaStore from 'zustand/vanilla'\nimport create, { SetState, GetState } from 'zustand'\nimport { createSelectorHooks } from 'auto-zustand-selectors-hook'\nimport { mountStoreDevtool } from 'simple-zustand-devtools'\nimport { isBrowser } from '~/library'\nimport { createGlobalSlice, GlobalSlice } from './global-slice'\n\n// typescript slicing: https://bit.ly/3qgvLbn\nexport type AppState = GlobalSlice\nexport type StoreSlice<T> = (set: SetState<AppState>, get: GetState<AppState>) => T\n\n//github.com/pmndrs/zustand#using-zustand-without-react\nexport const store = createVanillaStore<AppState>(\n  // compose all slices into AppState\n  (set, get) => ({\n    ...createGlobalSlice(set, get),\n  }),\n)\n\n// standard zustand store https://github.com/pmndrs/zustand\nconst useStoreBase = create(store)\n\n// devtools https://github.com/beerose/simple-zustand-devtools\nif (isBrowser) mountStoreDevtool('RareMintStore', useStoreBase as any)\n\n// typescrpt selector hooks: https://bit.ly/3fbBHfo\nexport const useStore = createSelectorHooks(useStoreBase)\n", "// This file is exclusively for Utilty functions\n// These fucntions must be pure functions and perform simple tasks\n// All interactions with apis go in the services folder.\n\nimport _ from 'lodash'\n\nexport const isBrowser = typeof window !== 'undefined'\nexport const isNode = !isBrowser\nexport const userAgent = isBrowser ? _.get(window, 'navigator.userAgent') : ''\nexport const hasEthereum = isBrowser && _.has(window, 'ethereum')\nexport const isAndroid = /(Android)/i.test(userAgent)\nexport const isIphone = /(iPhone|iPod)/i.test(userAgent)\nexport const isIpad = /(iPad)/i.test(userAgent)\nexport const isMobile = isIphone || isAndroid\n// A mobile browser with ethereum we assume it's Metamask Browser\nexport const isMetamask = isMobile && hasEthereum\n\nexport const formatAddress = (key: string) =>\n  `${key.slice(0, 4)}...${key.slice(-4)}`\n\nexport const base64Encode = (obj: {}) =>\n  Buffer.from(JSON.stringify(obj)).toString('base64')\n\nexport const base64Decode = (str: string) =>\n  JSON.parse(Buffer.from(str, 'base64').toString())\n\nexport function getBase64(file: File): Promise<any> {\n  return new Promise((resolve, rejects) => {\n    var reader = new FileReader()\n    reader.readAsDataURL(file)\n    reader.onload = function () {\n      resolve(reader?.result)\n    }\n    reader.onerror = function (error) {\n      rejects(error)\n    }\n  })\n}\n\nexport const copyToClipboard = (text: string) => {\n  const textField = document.createElement('textarea')\n  textField.innerText = text\n  document.body.appendChild(textField)\n  textField.select()\n  document.execCommand('copy')\n  textField.remove()\n}\n", "import type { AppConfig } from '~/app-config'\nimport type { GlobalSliceState } from './global-slice'\n\n// dummy for solve typescript undefined appconfig, we know it'll always be defined but we need to make ts happy\nexport const dummy_appconfig: AppConfig = {\n  network: {\n    chain: '',\n    chainId: '',\n  },\n  contracts: {},\n  services: {\n    graphql_api: '',\n  },\n  analytics: {\n    google: '',\n    sentry: '',\n  },\n  cloudinary: {\n    cloudName: '',\n    apiKey: '',\n    apiSecret: '',\n  },\n  features: {},\n}\n\nexport const defaultAppStateState: GlobalSliceState = {\n  show_wallet: false,\n  show_sidebar: true,\n  appconfig: dummy_appconfig, // this gets replaced on root.tsx loader.\n  user: null,\n}\n", "import type { StoreSlice } from '.'\nimport type { AppConfig } from '~/app-config'\nimport type { RareMintUser } from '~/auth.server'\nimport { defaultAppStateState } from './global-defaults'\n\nexport type GlobalSliceState = {\n  show_wallet: boolean\n  show_sidebar: boolean\n  appconfig: AppConfig\n  user: RareMintUser | null\n}\n\nexport type GlobalSliceActions = {\n  setShowWallet: (flag: boolean) => void\n  setShowSidebar: (flag: boolean) => void\n  setUser: (user: RareMintUser) => void\n  setSessionData: (session_data: SessionData) => void\n}\n\nexport type GlobalSlice = GlobalSliceState & GlobalSliceActions\n\ntype SessionData = { user: RareMintUser; appconfig: AppConfig }\n\nexport const createGlobalSlice: StoreSlice<GlobalSlice> = (set) => ({\n  ...defaultAppStateState,\n\n  setShowWallet: (flag) => set({ show_wallet: flag }),\n\n  setShowSidebar: (flag) => set({ show_sidebar: flag }),\n\n  setUser: (user: RareMintUser) => set({ user }),\n\n  setSessionData: (session_data: SessionData) => set(session_data),\n})\n", "import { createContext } from 'react'\n\nexport interface ClientStyleContextData {\n  reset: () => void\n  sheet: string\n}\n\nconst ClientStyleContext = createContext<ClientStyleContextData>({\n  reset: () => {},\n  sheet: '',\n})\n\nexport default ClientStyleContext\n", "import type { ActionFunction } from '@remix-run/node'\nimport { auth } from '~/auth.server'\n\nexport const action: ActionFunction = async ({ request, params }) => {\n  const url = new URL(request.url)\n  const redirect_to = url.searchParams.get('redirect_to')\n\n  return auth.authenticate(params.strategy!, request, {\n    successRedirect: redirect_to!,\n    failureRedirect: redirect_to!,\n  })\n}\n", "import { Link } from '@remix-run/react'\nimport { Wallet } from '~/components/wallet'\nimport { useStore } from '~/store'\nimport { styled } from '~/styles/stitches.config'\n\nconst Container = styled('div', {\n  fontFamily: 'system-ui, sans-serif',\n  lineHeight: 1.4,\n})\n\nexport default function Index() {\n  const { user, appconfig } = useStore()\n  console.log('Index user value', user)\n  console.log('Index appconfig value', appconfig)\n  return (\n    <Container>\n      <h1>Welcome {user ? 'Back' : null} to PoweStack Remix</h1>\n      <Wallet />\n      <ul>\n        <li>\n          <Link to=\"/jokes\">Jokes</Link>\n        </li>\n        <li>\n          <Link to=\"/jokes-error\">Jokes: Error</Link>\n        </li>\n      </ul>\n    </Container>\n  )\n}\n", "import { styled } from '@stitches/react'\nimport { useStore } from '~/store'\nimport _ from 'lodash'\nimport { ethers } from 'ethers'\nimport { useFetcher, useLocation } from '@remix-run/react'\n\nconst StyledWallet = styled('div', {\n  border: '1px dotted gray',\n  minHeight: 100,\n})\n\nexport const Wallet = () => {\n  const { user, appconfig } = useStore()\n  const location = useLocation()\n  const fetcher = useFetcher()\n\n  const loginWithMetamask = async () => {\n    const message = 'Login to PowerStack Remix'\n    const ethereum = _.get(window, 'ethereum')\n    if (!ethereum) alert('window.ethereum not found')\n    const accounts = await ethereum.send('eth_requestAccounts')\n    const provider = new ethers.providers.Web3Provider(ethereum)\n    const signer = provider.getSigner()\n    const signature = await signer.signMessage(message)\n    const address = await signer.getAddress()\n    console.log({ accounts, signature, address })\n\n    fetcher.submit(\n      {\n        signature,\n        address,\n        message,\n      },\n      {\n        method: 'post',\n        action: `/actions/login/metamask?redirect_to=${\n          location.pathname || '/'\n        }`,\n      },\n    )\n  }\n\n  return (\n    <StyledWallet>\n      {/* {console.log('Wat chain', appconfig.network.chain)}\n      <p>Network: {appconfig.network.chain}</p> */}\n      <p>Supported Network: Rinkeby</p>\n      <button onClick={loginWithMetamask}>Login with Metamask</button>\n      <p>Address: {user?.address ? user.address : 'wallet not connected'}</p>\n    </StyledWallet>\n  )\n}\n", "import { Link } from '@remix-run/react'\n\nimport { styled } from '../styles/stitches.config'\n\nconst Container = styled('div', {\n  backgroundColor: '#d6d6d6',\n})\n\nexport default function Jokes() {\n  return (\n    <Container>\n      <h1>Jokes</h1>\n      <p>This route works fine.</p>\n      <Link to=\"/\">Back to home</Link>\n    </Container>\n  )\n}\n", "export default function JokesError() {\n  throw new Error('This route is no joking with us.')\n}\n", "export default {'version':'37863a44','entry':{'module':'/build/entry.client-LLUJGBMV.js','imports':['/build/_shared/chunk-4ACWVKRS.js','/build/_shared/chunk-VJK2PPKE.js','/build/_shared/chunk-S5UHSVAV.js','/build/_shared/chunk-6SKE6JXS.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-OHPYQGB4.js','imports':['/build/_shared/chunk-B5JJD2GF.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':true,'hasErrorBoundary':true},'routes/actions/login/$strategy':{'id':'routes/actions/login/$strategy','parentId':'root','path':'actions/login/:strategy','index':undefined,'caseSensitive':undefined,'module':'/build/routes/actions/login/$strategy-Z6YG3TY5.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-XD66Y556.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/jokes':{'id':'routes/jokes','parentId':'root','path':'jokes','index':undefined,'caseSensitive':undefined,'module':'/build/routes/jokes-3SZMRQWW.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/jokes/jokes-error':{'id':'routes/jokes/jokes-error','parentId':'routes/jokes','path':'jokes-error','index':undefined,'caseSensitive':undefined,'module':'/build/routes/jokes/jokes-error-WQIBBHBW.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-37863A44.js'};", "\nimport * as entryServer from \"/Users/gaboesquivel/Code/powerstack-remix/app/entry.server.tsx\";\nimport * as route0 from \"/Users/gaboesquivel/Code/powerstack-remix/app/root.tsx\";\nimport * as route1 from \"/Users/gaboesquivel/Code/powerstack-remix/app/routes/actions/login/$strategy.tsx\";\nimport * as route2 from \"/Users/gaboesquivel/Code/powerstack-remix/app/routes/index.tsx\";\nimport * as route3 from \"/Users/gaboesquivel/Code/powerstack-remix/app/routes/jokes.tsx\";\nimport * as route4 from \"/Users/gaboesquivel/Code/powerstack-remix/app/routes/jokes/jokes-error.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/actions/login/$strategy\": {\n      id: \"routes/actions/login/$strategy\",\n      parentId: \"root\",\n      path: \"actions/login/:strategy\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/jokes\": {\n      id: \"routes/jokes\",\n      parentId: \"root\",\n      path: \"jokes\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/jokes/jokes-error\": {\n      id: \"routes/jokes/jokes-error\",\n      parentId: \"routes/jokes\",\n      path: \"jokes-error\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    }\n  };"],
  "mappings": "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",
  "names": []
}
